{"version":3,"sources":["components/Landingpage.js","components/Aboutme.js","components/Contact.js","components/Projects.js","components/Resume.js","components/Main.js","App.js","serviceWorker.js","index.js","image/journey.jpeg"],"names":["Landing","react_default","a","createElement","Component","About","Contact","Projects","Resume","Main","react_router","exact","path","component","LandingPage","AboutMe","App","className","lib","title","scroll","react_router_dom","to","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iNAWeA,mLANP,OACIC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAHKC,aCQPC,mLANP,OACIJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,gCAHGC,aCQLE,mLANP,OACIL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAHKC,aCQPG,mLANP,OACIN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,mCAHMC,aCQRI,mLANP,OACIP,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,iCAHIC,aCkBNK,EAZF,WACT,OACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCb,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWE,IAClCd,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWP,IAClCL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWN,IACnCN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWL,aCoB9BQ,MA7Bf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,oBACbhB,EAAAC,EAAAC,cAACe,EAAA,OAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAAM,GAC1BnB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACEjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,UAAT,UACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGJrB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,SACZlB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACEjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,UAAT,UACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGJrB,EAAAC,EAAAC,cAACe,EAAA,QAAD,KACEjB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,iBACfhB,EAAAC,EAAAC,cAACoB,EAAD,UCjBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECTNC,IAASC,OACT7B,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACApB,EAAAC,EAAAC,cAAC4B,EAAD,OAEEC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.df967b3d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Landing extends Component {\n    render() {\n        return(\n            <div><h1>Landing Page</h1></div>\n        )\n    }\n}\n\nexport default Landing;","import React, { Component } from 'react';\n\n\nclass About extends Component {\n    render() {\n        return(\n            <div><h1>About Page</h1></div>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\n\n\nclass Contact extends Component {\n    render() {\n        return(\n            <div><h1>Contact Page</h1></div>\n        )\n    }\n}\n\nexport default Contact;","import React, { Component } from 'react';\n\n\nclass Projects extends Component {\n    render() {\n        return(\n            <div><h1>Projects Page</h1></div>\n        )\n    }\n}\n\nexport default Projects;","import React, { Component } from 'react';\n\n\nclass Resume extends Component {\n    render() {\n        return(\n            <div><h1>Resume Page</h1></div>\n        )\n    }\n}\n\nexport default Resume;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport LandingPage from './Landingpage';\nimport AboutMe from './Aboutme';\nimport Contact from './Contact';\nimport Projects from './Projects';\nimport Resume from './Resume';\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path='/' component={LandingPage} />\n            <Route path='/aboutme' component={AboutMe} />\n            <Route path='/contact' component={Contact} />\n            <Route path='/projects' component={Projects} />\n            <Route path='/resume' component={Resume} />\n        </Switch>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport image from './image/journey.jpeg';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/Main';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"demo-big-content\">\n      <Layout>\n        <Header title=\"Title\" scroll>\n          <Navigation>\n            <Link to=\"/reume\">Resume</Link>\n            <Link to=\"/aboutme\">About Me</Link>\n            <Link to=\"/projects\">Projects</Link>\n            <Link to=\"/contact\">Contact</Link>\n          </Navigation>\n        </Header>\n        <Drawer title=\"Title\">\n          <Navigation>\n            <Link to=\"/reume\">Resume</Link>\n            <Link to=\"/aboutme\">About Me</Link>\n            <Link to=\"/projects\">Projects</Link>\n            <Link to=\"/contact\">Contact</Link>\n          </Navigation>\n        </Drawer>\n        <Content>\n          <div className=\"page-content\" />\n          <Main />\n        </Content>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/journey.81a0df7a.jpeg\";"],"sourceRoot":""}